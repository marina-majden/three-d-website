 const group = useRef()
    const { nodes, materials, animations } = useGLTF('/models/scene.gltf')
    const { actions } = useAnimations(animations, group)

    const haloRef = useRef()

    useFrame(() => {
        if (haloRef.current) {
            haloRef.current.rotation.z -= 0.006 // Adjust the speed of rotation here
        }
    });

    if (!props.isMobile) {

        const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });

        useEffect(() => {
            const handleMouseMove = (event) => {
                setMousePosition({ x: event.clientX, y: event.clientY });
            };
            window.addEventListener('mousemove', handleMouseMove);
            return () => {
                window.removeEventListener('mousemove', handleMouseMove);
            };
        }, []);

        useFrame(() => {
            if (group.current) {
                const x = mousePosition.x / window.innerWidth - 0.5;
                easing.dampE(group.current.rotation, [0, x / 4, 0], 0.25, 0);
                group.current.rotation.x = 0;
            }
        });
    }

    else if (props.isMobile) {
        const [direction, setDirection] = useState(1);

        useFrame(() => {
            if (group.current) {
                group.current.rotation.y += 0.002 * direction;
                if (group.current.rotation.y > 0.5) {
                    group.current.rotation.y = 0.5;
                    setDirection(-1);
                } else if (group.current.rotation.y < -0.5) {
                    group.current.rotation.y = -0.5;
                    setDirection(1);
                }
            }
        })
    }